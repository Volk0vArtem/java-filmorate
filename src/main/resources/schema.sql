drop table if exists users, mpa_ratings, films_users, friends, genres, films_genres, genres, films,
    directors, film_director, reviews, reviews_users_films, reviews_like, feed_history, event_types, operations cascade;

create table if not exists mpa_ratings (
    id integer GENERATED BY DEFAULT AS IDENTITY primary key,
    name varchar
);

create table if not exists films (
    id integer GENERATED BY DEFAULT AS IDENTITY primary key,
    name varchar(255) not null,
    description varchar(200),
    release_date date,
    duration bigint,
    likes integer,
    mpa_id integer,
    foreign key (mpa_id) references mpa_ratings(id) on delete cascade
);

create table if not exists users (
    id integer GENERATED BY DEFAULT AS IDENTITY primary key,
    name varchar(100),
    email varchar(100) not null,
    login varchar(20) not null unique,
    birthday date
);

create table if not exists friends (
    user_id integer not null references users(id) on delete cascade,
    friend_id integer not null references users(id) on delete cascade,
    primary key (friend_id, user_id)
);

create table if not exists genres (
    id integer GENERATED BY DEFAULT AS IDENTITY primary key,
    name varchar
);

create table if not exists films_genres (
    film_id integer not null references films(id) on delete cascade,
    genre_id integer not null references genres(id) on delete cascade,
    primary key (film_id, genre_id)
);

create table if not exists films_users (
    film_id integer not null references films(id) on delete cascade,
    user_id integer not null references users(id) on delete cascade,
    primary key (film_id, user_id)
);

create table if not exists directors (
    id integer GENERATED BY DEFAULT AS IDENTITY primary key,
    name varchar(100)
);

create table if not exists film_director (
    film_id integer not null references films(id) on delete cascade,
    director_id integer not null references directors(id) on delete cascade,
    PRIMARY KEY (film_id, director_id)
);

create TABLE if not exists reviews (
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content varchar(200),
    is_positive bool
);

create TABLE if not exists reviews_users_films (
   review_id integer not null REFERENCES reviews(id) on delete cascade,
   user_id integer not null,
   film_id integer not null
);

create TABLE IF NOT EXISTS reviews_like (
    review_id integer NOT NULL ,
    user_id integer NOT NULL,
    is_like bool
);

create TABLE if not exists event_types (
    id INT GENERATED BY DEFAULT AS IDENTITY  PRIMARY KEY,
    name varchar(10)
);

create TABLE if not exists operations (
    id INT GENERATED BY DEFAULT AS IDENTITY  PRIMARY KEY,
    name varchar(10)
);
create TABLE if not exists feed_history (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INT NOT NULL,
    create_time TIMESTAMP NOT NULL,
    event_type_id INT  NOT NULL,
    operation_id INT  NOT NULL,
    entity_id INT NOT NULL,
    CONSTRAINT feed_history_users_fk FOREIGN KEY (user_id) REFERENCES users(id) on delete cascade,
    CONSTRAINT feed_history_event_types_fk FOREIGN KEY (event_type_id) REFERENCES event_types(id) on delete cascade,
    CONSTRAINT feed_history_operations_fk FOREIGN KEY (operation_id) REFERENCES operations(id) on delete cascade
);